using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using tx_autogenerated_forms.Models;
using TXTextControl;
using TXTextControl.DocumentServer.Fields;
using TXTextControl.DocumentServer.PDF.AcroForms;

namespace tx_autogenerated_forms.Controllers {
    public class HomeController : Controller {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger) {
            _logger = logger;
        }

        public IActionResult Index() {
         // read all PDF files from "App_Data" folder and pass them to view
         var files = System.IO.Directory.GetFiles("App_Data", "*.pdf");
         return View(files);
        }

      [HttpGet]
      public List<SmartFormField> GetFormFields(string filename) {
 
         // read all acroform fields from PDF document
         TXTextControl.DocumentServer.PDF.AcroForms.FormField[] formFields =
            TXTextControl.DocumentServer.PDF.Forms.GetAcroFormFields("App_Data/" + filename);

         List<SmartFormField> smartFormFields = new List<SmartFormField>();

         // loop through all fields and convert them to "SmartFormField" objects
         foreach (TXTextControl.DocumentServer.PDF.AcroForms.FormField field in formFields) {

            switch (field) {
               case FormTextField textField:
                  smartFormFields.Add(new SmartTextFormField() {
                     Name = textField.FieldName,
                     Text = textField.Value,
                     DisplayName = textField.AlternateFieldName
                  });
                  break;
               case TXTextControl.DocumentServer.PDF.AcroForms.FormCheckBox checkBoxField:
                  smartFormFields.Add(new SmartCheckboxField() {
                     Name = checkBoxField.FieldName,
                     Checked = checkBoxField.IsChecked,
                     DisplayName = checkBoxField.AlternateFieldName
                  });
                  break;
               case FormComboBox comboBoxField:
                  SmartDropdownField sddf = new SmartDropdownField() {
                     Name = comboBoxField.FieldName,
                     Text = comboBoxField.Value,
                     DisplayName = comboBoxField.AlternateFieldName
                  };

                  foreach (var item in comboBoxField.Options) {
                     sddf.Items.Add(item);
                  }

                  smartFormFields.Add(sddf);

                  break;
            }

         }

         // return fields
         return smartFormFields;
      }

      [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error() {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}